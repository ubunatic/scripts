#!/usr/bin/env bash
# Bash50: 50 lines of pure Bash for safer scripts and better logs!
#
# Author:       Uwe Jugel, @ubunatic
# License:      MIT
# Website:      https://github.com/ubunatic/scripts#bash50
# Installation: curl -o .bash50rc https://raw.githubusercontent.com/ubunatic/scripts/main/bash/.bash50rc
# Usage:        Copy+paste all functions, options, and traps or just `source` this file.

# First, we need some nifty little helpers for having nice logs and error messages.
err()   {                     echo "$(dt): [ERROR] $*"  1>&2; }
log()   {                     echo "$(dt): [INFO] $*"   1>&2; }
debug() { test -z "$DEBUG" || echo "$(dt): [DEBUG] $*"  1>&2; }
dt()    { date +"%Y-%m-%d %H:%M:%S"; }

# Second, let's make our shell script a bit safer by failing fast; just like `make`.
set -o errexit    # exit on any error in the script (does NOT work inside functions!)
set -o pipefail   # consider errors from failed subcommands of a pipe
set -o functrace  # enabled debug info in funcs and subshells
set -o errtrace   # enable error tracing in funcs and subshells

# Third, enable error traces when using `script || fail "message"` statements and
# also setup an ERR trap with a generic message to provide consistent error messages.
# A `trace` function and a DEBUG trap are used to store the $BASH_COMMAND and $LINENO
# of the next command to be executed, until there is an unsuccessful command.
fail()  { local c=$? t="$_bash50_trace"; err "$*, code=$c at $t"; exit $c; }
trace() { if test "$1" = "0"; then _bash50_trace="\`$2\` in $0:$3"; fi; }
trap 'fail "command failed"' ERR
trap 'trace "$?" "$BASH_COMMAND" "$LINENO" "$FUNCNAME"' DEBUG


# That's all we need! Our Bash script is now a bit safer and has nice error logs.

# Bonus 1: `var` function for dynamic vars `$k=v` with whitespace-friendly assignment `k = v`
# Usage: var [ key=val | key = val | "$key"="$val" | "$key" = "$val" ]
var() { test $# -lt 4 && export "$1$2$3" && debug "setting $*" || fail "var: invalid number of arguments"; }

# TODO: Add more cool stuff here; readable one-liners allowed.

# STOP: If this file gets longer than 50 lines of code, incl. comments and whitespace,
#       then it is no longer a "script"! Use a real programming language or build system.
